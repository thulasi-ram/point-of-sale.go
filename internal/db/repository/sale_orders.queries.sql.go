// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sale_orders.queries.sql

package repository

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const createSaleOrder = `-- name: CreateSaleOrder :one
INSERT INTO sale_orders (customer_id, additional_discount)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, customer_id, additional_discount
`

type CreateSaleOrderParams struct {
	CustomerID         int64
	AdditionalDiscount pgtype.Numeric
}

func (q *Queries) CreateSaleOrder(ctx context.Context, arg CreateSaleOrderParams) (SaleOrder, error) {
	row := q.db.QueryRow(ctx, createSaleOrder, arg.CustomerID, arg.AdditionalDiscount)
	var i SaleOrder
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.AdditionalDiscount,
	)
	return i, err
}

const createSaleOrderItems = `-- name: CreateSaleOrderItems :one
INSERT INTO sale_order_items (sale_order_id, product_id, quantity, amount, discount)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, sale_order_id, product_id, quantity, amount, discount
`

type CreateSaleOrderItemsParams struct {
	SaleOrderID int64
	ProductID   int64
	Quantity    int32
	Amount      pgtype.Numeric
	Discount    pgtype.Numeric
}

func (q *Queries) CreateSaleOrderItems(ctx context.Context, arg CreateSaleOrderItemsParams) (SaleOrderItem, error) {
	row := q.db.QueryRow(ctx, createSaleOrderItems,
		arg.SaleOrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Amount,
		arg.Discount,
	)
	var i SaleOrderItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SaleOrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Amount,
		&i.Discount,
	)
	return i, err
}

const getSaleOrderWithItems = `-- name: GetSaleOrderWithItems :many
SELECT so.id, so.created_at, so.updated_at, customer_id, additional_discount, soi.id, soi.created_at, soi.updated_at, sale_order_id, product_id, quantity, amount, discount
FROM sale_orders as so
         INNER JOIN sale_order_items AS soi
                    ON so.id == soi.sale_order_id
WHERE so.id = $1
`

type GetSaleOrderWithItemsRow struct {
	ID                 int64
	CreatedAt          time.Time
	UpdatedAt          time.Time
	CustomerID         int64
	AdditionalDiscount pgtype.Numeric
	ID_2               int64
	CreatedAt_2        time.Time
	UpdatedAt_2        time.Time
	SaleOrderID        int64
	ProductID          int64
	Quantity           int32
	Amount             pgtype.Numeric
	Discount           pgtype.Numeric
}

func (q *Queries) GetSaleOrderWithItems(ctx context.Context, id int64) ([]GetSaleOrderWithItemsRow, error) {
	rows, err := q.db.Query(ctx, getSaleOrderWithItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSaleOrderWithItemsRow
	for rows.Next() {
		var i GetSaleOrderWithItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
			&i.AdditionalDiscount,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.SaleOrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Amount,
			&i.Discount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSaleOrdersWithItems = `-- name: ListSaleOrdersWithItems :many
SELECT so.id, so.created_at, so.updated_at, customer_id, additional_discount, soi.id, soi.created_at, soi.updated_at, sale_order_id, product_id, quantity, amount, discount
FROM sale_orders as so
         INNER JOIN sale_order_items AS soi
                    ON so.id == soi.sale_order_id
ORDER BY so.id
`

type ListSaleOrdersWithItemsRow struct {
	ID                 int64
	CreatedAt          time.Time
	UpdatedAt          time.Time
	CustomerID         int64
	AdditionalDiscount pgtype.Numeric
	ID_2               int64
	CreatedAt_2        time.Time
	UpdatedAt_2        time.Time
	SaleOrderID        int64
	ProductID          int64
	Quantity           int32
	Amount             pgtype.Numeric
	Discount           pgtype.Numeric
}

func (q *Queries) ListSaleOrdersWithItems(ctx context.Context) ([]ListSaleOrdersWithItemsRow, error) {
	rows, err := q.db.Query(ctx, listSaleOrdersWithItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSaleOrdersWithItemsRow
	for rows.Next() {
		var i ListSaleOrdersWithItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
			&i.AdditionalDiscount,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.SaleOrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Amount,
			&i.Discount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
